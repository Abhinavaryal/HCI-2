{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavaryal/Documents/GitHub/HCI-2/src/components/Redundant Components/OpenAI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OpenAI = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n\n  // Function to handle opening/closing of the pop-up window\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // Function to send user messages to ChatGPT API and receive responses\n  const handleSendMessage = async message => {\n    // Send user message to ChatGPT API\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n      messages: [{\n        role: 'system',\n        content: 'You are a user'\n      }, {\n        role: 'user',\n        content: message\n      }]\n    });\n\n    // Extract and store ChatGPT's response\n    const chatbotResponse = response.data.choices[0].text;\n    setChatMessages([...chatMessages, {\n      role: 'chatbot',\n      content: chatbotResponse\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle-button\",\n      onClick: toggleChatbot,\n      children: \"Chat with ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${message.role}`,\n          children: message.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat-input\",\n        placeholder: \"Type your message...\",\n        onKeyDown: event => {\n          if (event.key === 'Enter') {\n            handleSendMessage(event.target.value);\n            event.target.value = '';\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(OpenAI, \"vbMTzbml86aU09f/xP4U8SHUx10=\");\n_c = OpenAI;\nexport default OpenAI;\nvar _c;\n$RefreshReg$(_c, \"OpenAI\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","OpenAI","_s","isOpen","setIsOpen","chatMessages","setChatMessages","toggleChatbot","handleSendMessage","message","response","post","messages","role","content","chatbotResponse","data","choices","text","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","placeholder","onKeyDown","event","key","target","value","_c","$RefreshReg$"],"sources":["/Users/abhinavaryal/Documents/GitHub/HCI-2/src/components/Redundant Components/OpenAI.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst OpenAI = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n\n  // Function to handle opening/closing of the pop-up window\n  const toggleChatbot = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // Function to send user messages to ChatGPT API and receive responses\n  const handleSendMessage = async (message) => {\n    // Send user message to ChatGPT API\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n      messages: [\n        { role: 'system', content: 'You are a user' },\n        { role: 'user', content: message },\n      ],\n    });\n\n    // Extract and store ChatGPT's response\n    const chatbotResponse = response.data.choices[0].text;\n    setChatMessages([...chatMessages, { role: 'chatbot', content: chatbotResponse }]);\n  };\n\n  return (\n    <div className=\"chatbot-popup\">\n      {/* Render button for opening/closing the pop-up window */}\n      <button className=\"chatbot-toggle-button\" onClick={toggleChatbot}>\n        Chat with ChatGPT\n      </button>\n\n      {/* Render the chat window */}\n      {isOpen && (\n        <div className=\"chatbot-window\">\n          {/* Render the chat messages */}\n          <div className=\"chat-messages\">\n            {chatMessages.map((message, index) => (\n              <div key={index} className={`chat-message ${message.role}`}>\n                {message.content}\n              </div>\n            ))}\n          </div>\n\n          {/* Render the chat input */}\n          <input\n            className=\"chat-input\"\n            placeholder=\"Type your message...\"\n            onKeyDown={(event) => {\n              if (event.key === 'Enter') {\n                handleSendMessage(event.target.value);\n                event.target.value = '';\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OpenAI;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMU,aAAa,GAAGA,CAAA,KAAM;IAC1BH,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;;EAED;EACA,MAAMK,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3C;IACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,4CAA4C,EAAE;MAC9EC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAiB,CAAC,EAC7C;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEL;MAAQ,CAAC;IAEtC,CAAC,CAAC;;IAEF;IACA,MAAMM,eAAe,GAAGL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IACrDZ,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAE;MAAEQ,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAEC;IAAgB,CAAC,CAAC,CAAC;EACnF,CAAC;EAED,oBACEf,OAAA;IAAKmB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5BpB,OAAA;MAAQmB,SAAS,EAAC,uBAAuB;MAACE,OAAO,EAAEd,aAAc;MAAAa,QAAA,EAAC;IAElE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EAGRtB,MAAM,iBACLH,OAAA;MAAKmB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAE7BpB,OAAA;QAAKmB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3Bf,YAAY,CAACqB,GAAG,CAAC,CAACjB,OAAO,EAAEkB,KAAK,kBAC/B3B,OAAA;UAAiBmB,SAAS,EAAG,gBAAeV,OAAO,CAACI,IAAK,EAAE;UAAAO,QAAA,EACxDX,OAAO,CAACK;QAAO,GADRa,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAGhB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eAGNzB,OAAA;QACEmB,SAAS,EAAC,YAAY;QACtBS,WAAW,EAAC,sBAAsB;QAClCC,SAAS,EAAGC,KAAK,IAAK;UACpB,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;YACzBvB,iBAAiB,CAACsB,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;YACrCH,KAAK,CAACE,MAAM,CAACC,KAAK,GAAG,EAAE;UACzB;QACF;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV,CAAC;AAACvB,EAAA,CA1DID,MAAM;AAAAiC,EAAA,GAANjC,MAAM;AA4DZ,eAAeA,MAAM;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}